#pragma once

#include <array>

// IMPORTANT: do not add new node type in the middle of enums.
// must add into before 'Size' to prevent occurring conflicts to save/load nodes.
enum class NodeType
{
	Empty,
	NewFloat,
	NewFloat3,
	NewFloat4,
	RandFloat3,
	AddFloat3,
	GetParticlePosition,
	GetParticleVelocity,
	GetParticleAcceleration,
	EmitterOutput,
	SimulatorOutput,
	RendererOutput,
	StartParticleSimulation,
	PointAttractionForce,
	DragForce,
	VortexForce,
	CurlNoiseForce,
	MultiplyFloat3ByScalar,
	SampleTexture2d,
	GrayscaleToTranslucent,
	SetColorOfFloat4,
	GetParticleColor,
	SampleTexture2dSubUvAnimation,
	MultiplyFloat,
	MakeFloat4ByColorAlpha,
	MaskX,
	GetParticleAlpha,
	RandFloat,
	MaskY,
	MaskZ,
	MaskW,
	MakeFloat4,
	MakeFloat3,
	AddFloat,
	SinTime,
	Clip,
	Size
};

const std::array<NodeType, static_cast<size_t>(NodeType::Size)> nodeTypes = 
{
	NodeType::Empty,
	NodeType::NewFloat,
	NodeType::NewFloat3,
	NodeType::NewFloat4,
	NodeType::RandFloat3,
	NodeType::AddFloat3,
	NodeType::GetParticlePosition,
	NodeType::GetParticleVelocity,
	NodeType::GetParticleAcceleration,
	NodeType::EmitterOutput,
	NodeType::SimulatorOutput,
	NodeType::RendererOutput,
	NodeType::StartParticleSimulation,
	NodeType::PointAttractionForce,
	NodeType::DragForce,
	NodeType::VortexForce,
	NodeType::CurlNoiseForce,
	NodeType::MultiplyFloat3ByScalar,
	NodeType::SampleTexture2d,
	NodeType::GrayscaleToTranslucent,
	NodeType::SetColorOfFloat4,
	NodeType::GetParticleColor,
	NodeType::SampleTexture2dSubUvAnimation,
	NodeType::MultiplyFloat,
	NodeType::MakeFloat4ByColorAlpha,
	NodeType::MaskX,
	NodeType::GetParticleAlpha,
	NodeType::RandFloat,
	NodeType::MaskY,
	NodeType::MaskZ,
	NodeType::MaskW,
	NodeType::MakeFloat4,
	NodeType::MakeFloat3,
	NodeType::AddFloat,
	NodeType::SinTime,
	NodeType::Clip,
};

const std::array<std::string, static_cast<size_t>(NodeType::Size)> nodeNames =
{
	"Empty",
	"NewFloat",
	"NewFloat3",
	"NewFloat4",
	"RandFloat3",
	"AddFloat3",
	"GetParticlePosition",
	"GetParticleVelocity",
	"GetParticleAcceleration",
	"EmitterOutput",
	"SimulatorOutput",
	"RendererOutput",
	"StartParticleSimulation",
	"PointAttractionForce",
	"DragForce",
	"VortexForce",
	"CurlNoiseForce",
	"MultiplyFloat3ByScalar",
	"SampleTexture2D",
	"GrayscaleToTranslucent",
	"SetColorOfFloat4",
	"GetParticleColor",
	"SampelTexture2dSubUvAnimation",
	"MultiplyFloat",
	"MakeFloat4ByColorAlpha",
	"MaskX",
	"GetParticleAlpha",
	"RandFloat",
	"MaskY",
	"MaskZ",
	"MaskW",
	"MakeFloat4",
	"MakeFloat3",
	"AddFloat",
	"SinByTime",
	"Clip",
};